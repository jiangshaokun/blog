<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2019/11/23/hello-world/"/>
      <url>/blog/2019/11/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用vue-cli3 创建一个项目</title>
      <link href="/blog/2019/10/02/%E4%BD%BF%E7%94%A8vue-cli3-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
      <url>/blog/2019/10/02/%E4%BD%BF%E7%94%A8vue-cli3-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>从头构建一个vue2.x项目（1）</p><p><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">vue-cli3</a> 是官方脚手架工具。下面介绍如何用它生成一个项目。</p><h2 id="安装-vue-cli3"><a href="#安装-vue-cli3" class="headerlink" title="安装 vue-cli3"></a>安装 vue-cli3</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>检查是否安装正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h2 id="使用图形化界面创建项目"><a href="#使用图形化界面创建项目" class="headerlink" title="使用图形化界面创建项目"></a>使用图形化界面创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>打开 <code>http://localhost:8000</code>，（点击左下角图标回到首页，）点击<strong>创建</strong>。</p><h3 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h3><ol><li>命名：vue2-demo</li><li>包管理器：npm（相比新版本npm，yarn的优势已不明显）</li><li>初始化 git 仓库：feat: 初始化vue2 demo项目</li></ol><h3 id="预设"><a href="#预设" class="headerlink" title="预设"></a>预设</h3><ol><li>选择<strong>手动</strong></li></ol><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li>Babel: 开</li><li>Typescript: 关（vue3才和ts更好的搭配）</li><li>PWA: 开</li><li>Router: 开</li><li>Vuex: 开</li><li>CSS Pre-processors: 开</li><li>Liner/Formatter: 开</li><li>Unit Testing: 开</li><li>E2E Testing: 开</li><li>使用配置文件: 开（使package.json行数不那么多）</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>Use history mode for router: 开</li><li>Pick a CSS pre-processor: SCSS(with dart-sass) 官方主推 dart-sass</li><li>Pick a linter/formatter config: ESLint + Airbnb config（稍后再配置prettier）</li><li>Pick additional lint features:<ul><li>Lint on save: 开</li><li>Lint and fix on commit: 关（手动fix，避免自动fix产生奇怪的问题）</li></ul></li><li>Pick a unit testing solution: Jest（简单时尚）</li><li>Pick a E2E testing solution: Cypress(Chrome only) (简单时尚)</li></ol><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>选择<strong>保存预设并创建项目</strong></p><h3 id="跑起来看一下"><a href="#跑起来看一下" class="headerlink" title="跑起来看一下"></a>跑起来看一下</h3><ol><li>点击侧边栏最后一个<strong>任务</strong>图标</li><li>点击 <strong>serve</strong></li><li>点击右侧的<strong>运行</strong></li><li>浏览器打开 <code>http://localhost:8080</code></li></ol><p>至此，项目就完成创建啦。</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行内元素与块状元素</title>
      <link href="/blog/2016/09/13/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E4%B8%8E%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0/"/>
      <url>/blog/2016/09/13/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E4%B8%8E%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>面试经常考到这个东西, 比较基础的内容.</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>块级元素会独占一行,默认情况下,其宽度自动填满其父元素宽度. 对应 <code>display: block;</code></p><p>行内元素不会独占一行,相邻的行内元素会排列在同一行里,直到一行排不下,才会换行,其宽度随元素的内容而变化. <code>display: inline;</code></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><pre><code>address - 地址blockquote - 块引用center - 举中对齐块dir - 目录列表div - 常用块级容易，也是CSS layout的主要标签dl - 定义列表fieldset - form控制组form - 交互表单h1 - 大标题h2 - 副标题h3 - 3级标题h4 - 4级标题h5 - 5级标题h6 - 6级标题hr - 水平分隔线isindex - input promptmenu - 菜单列表noframes - frames可选内容，（对于不支持frame的浏览器显示此区块内容noscript - 可选脚本内容（对于不支持script的浏览器显示此内容）ol - 有序表单p - 段落pre - 格式化文本table - 表格ul - 无序列表</code></pre><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><pre><code>a - 锚点abbr - 缩写acronym - 首字b - 粗体(不推荐)bdo - bidi overridebig - 大字体br - 换行cite - 引用code - 计算机代码(在引用源码的时候需要)dfn - 定义字段em - 强调font - 字体设定(不推荐)i - 斜体img - 图片input - 输入框kbd - 定义键盘文本label - 表格标签q - 短引用s - 中划线(不推荐)samp - 定义范例计算机代码select - 项目选择small - 小字体文本span - 常用内联容器，定义文本内区块strike - 中划线strong - 粗体强调sub - 下标sup - 上标textarea - 多行文本输入框tt - 电传文本u - 下划线var - 定义变量</code></pre><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>块级元素<strong>独占一行</strong>，在默认情况下，宽度自动填满父元素宽度. </li><li>行内元素<strong>不会独占一行</strong>，宽度随着元素的内容而变化.</li><li>行内元素的<code>width</code>和<code>height</code>的设置<strong>无效</strong>.</li><li>行内元素的<code>margin</code>和<code>padding</code>的 <strong>垂直</strong> 方向上不产生边距效果</li><li>可以使用<code>display:block;</code>或<code>display:inline;</code>实现块级元素和行内元素的相互转换</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>给行内元素设置垂直方向上的<code>padding</code>的时候, 并不是完全无效. 而是基于自身内容向上或者下扩展. 但是<strong>不占据高度</strong>,却能<strong>遮盖下方元素</strong></li><li>设置<code>display:inline-block;</code>后, 除了不独占一行, 不充满父元素宽度, 其他特性与块状元素一致</li></ul>]]></content>
      
      
      <categories>
          
          <category> html/css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动开发知识库</title>
      <link href="/blog/2016/08/14/%E7%A7%BB%E5%8A%A8%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
      <url>/blog/2016/08/14/%E7%A7%BB%E5%8A%A8%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="2016年7月及以前"><a href="#2016年7月及以前" class="headerlink" title="2016年7月及以前"></a>2016年7月及以前</h2><h3 id="tap-穿透问题"><a href="#tap-穿透问题" class="headerlink" title="tap 穿透问题"></a>tap 穿透问题</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>上层元素绑定 tap 事件,下层绑定 click 事件(或者是 <code>a</code> 链接). 点击上层元素时, 会发生穿透, 同时触发tap 和 click事件.</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>事件绑定都用 tap 或者都用 click 事件即可避免</p><h3 id="图片下边距"><a href="#图片下边距" class="headerlink" title="图片下边距"></a>图片下边距</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>图片宽高 100% 即全屏时仍会出现下方有空白, 即有下边距</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p><code>img</code> 标签默认边距导致的. 图片样式设置 <code>float: left</code> 或者清除默认边距<code>margin: 0</code>.</p><h3 id="视频音频无法自动播放"><a href="#视频音频无法自动播放" class="headerlink" title="视频音频无法自动播放"></a>视频音频无法自动播放</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>在某些移动端浏览器环境中, <code>audio</code> 或 <code>video</code> 设置 <code>autoplay</code> 属性无效, js 控制播放也无效.是由于不同浏览器的默认设置问题,不属于 bug.出于费流量等会导致用户困扰的原因, 一些webview下不允许自动播放或者js控制播放. 必须由用户行为触发播放.</p><h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h4><p> 因此, 可以给 <code>document</code> 绑定 <code>ontouchstart</code> 事件播放. 或者查询相关接口, 比如微信 webview 可以在调用 jssdk的 ready 方法回调中执行自动播放</p><h3 id="flex-兼容性问题"><a href="#flex-兼容性问题" class="headerlink" title="flex 兼容性问题"></a>flex 兼容性问题</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>flex 属于较新的 css3 语法, 某些 webview 中不生效</p><h4 id="解决办法-3"><a href="#解决办法-3" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用 <code>box-flex</code> 代替或者不使用</p><h3 id="touchend-移出仍然触发"><a href="#touchend-移出仍然触发" class="headerlink" title="touchend 移出仍然触发"></a>touchend 移出仍然触发</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>某元素上绑定 <code>touchend</code> 事件, 只要是从此元素 <code>touchstart</code>     即使移出该元素范围仍然触发该元素 touchend 事件.</p><h4 id="解决办法-4"><a href="#解决办法-4" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用 <code>tap</code> 代替 click 而不是 <code>touchend</code></p><h3 id="行内元素之间有空格"><a href="#行内元素之间有空格" class="headerlink" title="行内元素之间有空格"></a>行内元素之间有空格</h3><h4 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h4><p>行内元素之间即使设置了外边距为 0, 依然有空格的间隔. 是由于写 dom 元素的时候行内元素换行所致</p><h4 id="解决办法-5"><a href="#解决办法-5" class="headerlink" title="解决办法"></a>解决办法</h4><p>代码编写或格式化时, 行内元素不换行</p><h3 id="animation-css3-动画不生效"><a href="#animation-css3-动画不生效" class="headerlink" title="animation css3 动画不生效"></a>animation css3 动画不生效</h3><h4 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h4><p>设置了 animation 动画, chrome 模拟调试能正常运行. 手机端不生效.</p><h4 id="解决办法-6"><a href="#解决办法-6" class="headerlink" title="解决办法"></a>解决办法</h4><p>添加 <code>-webkit-</code> 厂商前缀, 要注意的是, animation 属性要分开写, 不写简写, 简写一些浏览器即使添加 <code>-webkit-</code> 也不生效</p><h3 id="苹果-transform-rotate-3d-风车转动问题"><a href="#苹果-transform-rotate-3d-风车转动问题" class="headerlink" title="苹果 transform rotate 3d 风车转动问题"></a>苹果 transform rotate 3d 风车转动问题</h3><h4 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h4><p>使用 transform rotate 3d 做风车转动效果时, 风车转到一半又转回来. 安卓正常转360度</p><h4 id="解决办法-7"><a href="#解决办法-7" class="headerlink" title="解决办法"></a>解决办法</h4><p>平面转动 使用 rotate 2d 安卓苹果都能正常</p><h3 id="微信文章阅读原文链接打不开"><a href="#微信文章阅读原文链接打不开" class="headerlink" title="微信文章阅读原文链接打不开"></a>微信文章阅读原文链接打不开</h3><h4 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h4><p>微信文章阅读原文链接打不开, 因为参数被加上了<code>#</code>开头的参数显示来源</p><h4 id="解决办法-8"><a href="#解决办法-8" class="headerlink" title="解决办法"></a>解决办法</h4><p>用代码去除带 <code>#</code> 的参数</p>]]></content>
      
      
      <categories>
          
          <category> 问题库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 移动web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发问题库</title>
      <link href="/blog/2016/08/08/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E5%BA%93/"/>
      <url>/blog/2016/08/08/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="2016年7月及以前"><a href="#2016年7月及以前" class="headerlink" title="2016年7月及以前"></a>2016年7月及以前</h2><h3 id="react-redux-react-router-项目-state-更新了-UI却没有更新"><a href="#react-redux-react-router-项目-state-更新了-UI却没有更新" class="headerlink" title="react redux react-router 项目 state 更新了,UI却没有更新"></a>react redux react-router 项目 state 更新了,UI却没有更新</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>调用 reducer 后 UI没有更新, 审查发现 state 更新了.<br>原因一: 修改了 props 里的 state, 导致了 state 更改,因此导致传入 reducer 的 old state和new state一样,不触发更新.<br>原因二: 修改了多层嵌套对象中的一个属性, reducer 是浅比较,因此判断state相同, 所以不更新 UI</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>一: 不直接修改state, 只用触发action用过reducer修改state<br>二: 解决办法: 用Object.assign(), map方法对多层嵌套对象进行深拷贝,并返回新的对象</p><h3 id="react-router-路径匹配错误问题"><a href="#react-router-路径匹配错误问题" class="headerlink" title="react-router 路径匹配错误问题"></a>react-router 路径匹配错误问题</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>本地调试时路径匹配正常, 上传github 的 ghpages 后路径匹配不对. 原因: react-router 是基于根路径匹配</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>将子文件夹添加至router中. 比如:项目放在 <code>https://jiangshaokun.github.io/about/</code> router 匹配不到 <code>/</code> 而要匹配 <code>/about/</code></p>]]></content>
      
      
      <categories>
          
          <category> 问题库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016全栈学习大纲</title>
      <link href="/blog/2016/07/25/2016%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
      <url>/blog/2016/07/25/2016%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<p>  不知不觉已经2016下半年了. 为了适应工作需求, 必须由前端向后端延伸了. 话是这么说, 还是偏前端, 后端也是偏node.js.<br>  此文包括关于前后端的学习,以及需要实践的内容. 涉及的知识点基本都已经入门或实用. 下半年主要任务是深入学习或者熟练使用.</p><a id="more"></a><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h3><ul><li>html5</li><li>css3</li><li>javascript</li><li>js设计模式</li><li>less/scss</li><li>es6/jsx</li></ul><h3 id="自己的库"><a href="#自己的库" class="headerlink" title="自己的库"></a>自己的库</h3><ul><li>mixin.less</li><li>jsk.js</li><li>移动知识库</li><li>问题库</li><li>架构</li></ul><h3 id="库框架"><a href="#库框架" class="headerlink" title="库框架"></a>库框架</h3><h4 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h4><ul><li>jquery/zepto</li><li>lodash</li><li>hammer</li><li>swiper</li><li>animate.css</li></ul><h4 id="MV"><a href="#MV" class="headerlink" title="MV*"></a>MV*</h4><ul><li>react + react-router + jsx + redux</li><li>vue + vue-cli + vuex + vue-router</li><li>bootstrap</li></ul><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><ul><li>create.js</li><li>pixi.js</li><li>egret</li></ul><h4 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h4><ul><li>electron.js</li><li>react native</li></ul><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul><li>html: html5boilerplate</li><li>css</li><li>js</li><li>git commit</li><li>项目命名</li><li>注释</li><li>RESTful API</li><li>开发流程</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>百度/Google</li><li>提问</li><li>插件</li><li>console调试</li></ul><h3 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h3><ul><li>git</li><li>markdown</li></ul><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><ul><li>github</li><li>codepen</li><li>jsfiddle</li><li>cdn: qiniu,leancloud</li><li>hexo博客</li><li>在线简历</li></ul><h3 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h3><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><ul><li>IntelliJ IDEA</li><li>sublime text</li></ul><h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><ul><li>gulp</li><li>webpack</li><li>yeoman</li></ul><h4 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h4><ul><li>chrome</li><li>browserSync</li><li>postman</li><li>terminal/iTerm</li><li>微信开发者工具</li><li>mobile console</li></ul><h4 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h4><h5 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h5><ul><li>karma</li><li>qunit</li><li>Mocha: Chai</li><li>tap/tape/ava</li></ul><h5 id="端到端测试"><a href="#端到端测试" class="headerlink" title="端到端测试"></a>端到端测试</h5><ul><li>selenium</li><li>nightwatch</li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="自己的库-1"><a href="#自己的库-1" class="headerlink" title="自己的库"></a>自己的库</h3><ul><li>php mysql</li><li>php 微信API</li><li>node mysql/mongoDB</li><li>node 微信API</li></ul><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><ul><li>n 版本管理</li><li>npm 包管理工具</li><li>nodemon/pm2 进程管理</li><li>cheerio 后端jquery</li><li>express/koa</li><li>mongoose</li><li>jade</li></ul><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul><li>codeigniter</li><li>laravel</li></ul><h3 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h3><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>macbook</li><li>linux shell,crontab</li><li>微信公众号开发</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 全栈 </tag>
            
            <tag> 指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动web开发之viewport</title>
      <link href="/blog/2016/06/20/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E4%B9%8Bviewport/"/>
      <url>/blog/2016/06/20/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E4%B9%8Bviewport/</url>
      
        <content type="html"><![CDATA[<h3 id="viewport-作用"><a href="#viewport-作用" class="headerlink" title="viewport 作用"></a>viewport 作用</h3><p>一个移动专属的Meta值，用于定义视口的各种行为。<br>最常用:</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</code></pre><h3 id="几个-viewport"><a href="#几个-viewport" class="headerlink" title="几个 viewport"></a>几个 viewport</h3><h4 id="layout-viewport"><a href="#layout-viewport" class="headerlink" title="layout viewport"></a>layout viewport</h4><p>虚拟的布局视口（layout viewport），而这个视口的分辨率接近于PC显示器，Apple将其定义为980px（其他厂商各有不同）。</p><h4 id="visual-viewport"><a href="#visual-viewport" class="headerlink" title="visual viewport"></a>visual viewport</h4><p>可以简单的认为是手持设备物理屏幕的可视区域，我们称之为（视觉视口）visual viewport。这是一个比较直观的概念，因为你能看得见你的手机屏幕。</p><h4 id="ideal-viewport"><a href="#ideal-viewport" class="headerlink" title="ideal viewport"></a>ideal viewport</h4><p>它类似于布局视口，但宽度和视觉视口相同，这就是完美视口（ideal viewport）。用户不用缩放和拖动网页就能够很好的进行网页浏览.</p><h3 id="viewport特性"><a href="#viewport特性" class="headerlink" title="viewport特性"></a>viewport特性</h3><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>width</td><td>正整数或 <code>device-width</code></td><td>定义视口的宽度，单位为像素</td></tr><tr><td>height</td><td>正整数或 <code>device-height</code></td><td>定义视口的高度，单位为像素</td></tr><tr><td>initial-scale</td><td>[0.0-10.0]</td><td>定义初始缩放值</td></tr><tr><td>minimum-scale</td><td>[0.0-10.0]</td><td>定义缩小最小比例，它必须小于或等于maximum-scale设置</td></tr><tr><td>maximum-scale</td><td>[0.0-10.0]</td><td>定义放大最大比例，它必须大于或等于minimum-scale设置</td></tr><tr><td>user-scalable</td><td>yes/no</td><td>定义是否允许用户手动缩放页面，默认值yes</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 移动web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 移动web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS盒模型相关知识</title>
      <link href="/blog/2016/06/07/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/blog/2016/06/07/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>整理一下自己关于 <strong>css 盒模型</strong> 的相关知识.</p><h2 id="盒模型概念"><a href="#盒模型概念" class="headerlink" title="盒模型概念"></a>盒模型概念</h2><p>CSS 框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。<br>示意图:</p><p><img src="https://www.w3school.com.cn/i/ct_boxmodel.gif" alt="Box Model"></p><ul><li><strong>另外</strong>: css3 出了个 <code>box-sizing</code> 属性可以改变盒模型:详情可了解<a href="http://www.w3school.com.cn/cssref/pr_box-sizing.asp" target="_blank" rel="noopener">这里</a></li></ul><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><ul><li>只有上下外边距会发生合并, 左右外边距不会合并, 内边距也不会合并</li><li>上下外边距相遇时(中间无内容边框或内边距),就会发生合并</li><li>合并后,外边距等于较大者</li><li>合并会连续发生</li><li>外边距合并的意义: 使段落之间的距离一致。</li></ul><h2 id="盒模型百分比"><a href="#盒模型百分比" class="headerlink" title="盒模型百分比"></a>盒模型百分比</h2><ul><li>内外边距的百分比都是基于父元素的宽度计算</li><li>宽度百分比基于父元素宽度百分比计算</li><li>高度百分比基于父元素高度百分比计算</li></ul><h2 id="负外边距"><a href="#负外边距" class="headerlink" title="负外边距"></a>负外边距</h2><ul><li><code>margin-left</code> 或 <code>margin-top</code> 设置为负值时, 元素将基于自身原始位置左移或者上移, 其后的同层元素(静态文档流或者float同层元素)将会跟随移动相同距离</li><li><code>margin-right</code> 或 <code>margin-bottom</code> 设置为负值时, 元素自身位置不变, 其后的同层元素(静态文档流或者float同层元素)将会左移或者上移, 可覆盖该元素</li></ul>]]></content>
      
      
      <categories>
          
          <category> html/css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html编码规范</title>
      <link href="/blog/2016/05/31/html%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/blog/2016/05/31/html%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端开发核心思想：</p><ul><li>表现、内容和行为的分离</li><li>标记应该是结构良好、语义正确 以及 普遍合法 。</li><li>Javascript应该起到渐进式增强用户体验的作用 。</li></ul><p>尽量遵循HTML标准和语义，但是不应该以浪费实用性作为代价；</p><p>任何时候都要用尽量小的复杂度和尽量少的标签来解决问题。</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="class-单词全字母小写，单词间以-分隔。"><a href="#class-单词全字母小写，单词间以-分隔。" class="headerlink" title="class 单词全字母小写，单词间以 - 分隔。"></a><code>class</code> 单词全字母小写，单词间以 - 分隔。</h3><p>例如 <code>.foo-bar</code> </p><h3 id="id-采用驼峰式命名。"><a href="#id-采用驼峰式命名。" class="headerlink" title="id 采用驼峰式命名。"></a><code>id</code> 采用驼峰式命名。</h3><p>例如 <code>#fooBar</code></p><h3 id="id，class-命名，在避免冲突并描述清楚的前提下尽可能短。"><a href="#id，class-命名，在避免冲突并描述清楚的前提下尽可能短。" class="headerlink" title="id，class 命名，在避免冲突并描述清楚的前提下尽可能短。"></a><code>id</code>，<code>class</code> 命名，在避免冲突并描述清楚的前提下尽可能短。</h3><pre><code>&lt;!-- good --&gt;&lt;div id=&quot;nav&quot;&gt;&lt;/div&gt;&lt;!-- bad --&gt;&lt;div id=&quot;navigation&quot;&gt;&lt;/div&gt;&lt;!-- good --&gt;&lt;p class=&quot;comment&quot;&gt;&lt;/p&gt;&lt;!-- bad --&gt;&lt;p class=&quot;com&quot;&gt;&lt;/p&gt;</code></pre><h3 id="id，class-以功能或内容命名，不以表现形式命名。以面向对象-的方式写-CSS"><a href="#id，class-以功能或内容命名，不以表现形式命名。以面向对象-的方式写-CSS" class="headerlink" title="id，class 以功能或内容命名，不以表现形式命名。以面向对象 的方式写 CSS."></a><code>id</code>，<code>class</code> 以功能或内容命名，不以表现形式命名。以面向对象 的方式写 <code>CSS</code>.</h3><p>示例:</p><pre><code>&lt;!-- good --&gt;&lt;div class=&quot;sidebar&quot;&gt;&lt;/div&gt;&lt;!-- bad --&gt;&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</code></pre><p>BEM（Block, Element, Modifier）命名法:</p><pre><code>.block{}.block__element{}.block--modifier{}</code></pre><p>其中：</p><ul><li>.block 代表某个基本的抽象元素；</li><li>.block__element 代表 .block 这一整体的一个子元素；</li><li>.block–modifier 代表 .block 的某个不同状态。</li></ul><p>示例：</p><pre><code>.person{}.person--woman{}.person__hand{}.person__hand--left{}.person__hand--right{}</code></pre><h3 id="禁止为了-hook-脚本，创建无样式信息的-class"><a href="#禁止为了-hook-脚本，创建无样式信息的-class" class="headerlink" title="禁止为了 hook 脚本，创建无样式信息的 class."></a>禁止为了 hook 脚本，创建无样式信息的 <code>class</code>.</h3><p>解释：</p><p>使用 <code>id</code>、属性选择作为 hook 是更好的方式。如必要使用 js hook，则类名以 <code>.js-</code> 开头。</p><h3 id="同一页面，应避免使用相同的-name-与-id。"><a href="#同一页面，应避免使用相同的-name-与-id。" class="headerlink" title="同一页面，应避免使用相同的 name 与 id。"></a>同一页面，应避免使用相同的 <code>name</code> 与 <code>id</code>。</h3><p>解释：</p><p>IE 浏览器会混淆元素的 id 和 name 属性， document.getElementById 可能获得不期望的元素。所以在对元素的 id 与 name 属性的命名需要非常小心。</p><p>一个比较好的实践是，为 id 和 name 使用不同的命名法。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="属性名必须使用小写字母。"><a href="#属性名必须使用小写字母。" class="headerlink" title="属性名必须使用小写字母。"></a>属性名必须使用小写字母。</h3><p>示例：</p><pre><code>&lt;!-- good --&gt;&lt;p&gt;Hello StyleGuide!&lt;/p&gt;&lt;!-- bad --&gt;&lt;P&gt;Hello StyleGuide!&lt;/P&gt;</code></pre><h3 id="属性值必须用双引号包围。"><a href="#属性值必须用双引号包围。" class="headerlink" title="属性值必须用双引号包围。"></a>属性值必须用双引号包围。</h3><p>示例：</p><pre><code>&lt;!-- good --&gt;&lt;script src=&quot;esl.js&quot;&gt;&lt;/script&gt;&lt;!-- bad --&gt;&lt;script src=&apos;esl.js&apos;&gt;&lt;/script&gt;&lt;script src=esl.js&gt;&lt;/script&gt;</code></pre><h3 id="标签的使用应尽量简洁，减少不必要的标签。"><a href="#标签的使用应尽量简洁，减少不必要的标签。" class="headerlink" title="标签的使用应尽量简洁，减少不必要的标签。"></a>标签的使用应尽量简洁，减少不必要的标签。</h3><p>示例：</p><pre><code>&lt;!-- good --&gt;&lt;img class=&quot;avatar&quot; src=&quot;image.png&quot;&gt;&lt;!-- bad --&gt;&lt;span class=&quot;avatar&quot;&gt;&lt;img src=&quot;image.png&quot;&gt;&lt;/span&gt;</code></pre><h3 id="布尔类型的属性，建议不添加属性值。"><a href="#布尔类型的属性，建议不添加属性值。" class="headerlink" title="布尔类型的属性，建议不添加属性值。"></a>布尔类型的属性，建议不添加属性值。</h3><p>示例：</p><pre><code>&lt;input type=&quot;text&quot; disabled&gt;&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked&gt;</code></pre><h3 id="自定义属性建议以-xxx-为前缀，推荐使用-data-。"><a href="#自定义属性建议以-xxx-为前缀，推荐使用-data-。" class="headerlink" title="自定义属性建议以 xxx- 为前缀，推荐使用 data-。"></a>自定义属性建议以 <code>xxx-</code> 为前缀，推荐使用 <code>data-</code>。</h3><p>解释：</p><p>使用前缀有助于区分自定义属性和标准定义的属性。</p><p>示例：</p><pre><code>&lt;ol data-ui-type=&quot;Select&quot;&gt;&lt;/ol&gt;</code></pre><h3 id="标签使用必须符合标签嵌套规则。"><a href="#标签使用必须符合标签嵌套规则。" class="headerlink" title="标签使用必须符合标签嵌套规则。"></a>标签使用必须符合标签嵌套规则。</h3><p>参见：<a href="http://www.admin10000.com/document/4894.html" target="_blank" rel="noopener">html 嵌套规则</a></p><h3 id="对于无需自闭合的标签，不允许自闭合。"><a href="#对于无需自闭合的标签，不允许自闭合。" class="headerlink" title="对于无需自闭合的标签，不允许自闭合。"></a>对于无需自闭合的标签，不允许自闭合。</h3><p>解释：</p><p>常见无需自闭合标签有input、br、img、hr等。</p><p>示例：</p><pre><code>&lt;!-- good --&gt;&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;&lt;!-- bad --&gt;&lt;input type=&quot;text&quot; name=&quot;title&quot; /&gt;</code></pre><h3 id="HTML-标签的使用应该遵循标签的语义。"><a href="#HTML-标签的使用应该遵循标签的语义。" class="headerlink" title="HTML 标签的使用应该遵循标签的语义。"></a><code>HTML</code> 标签的使用应该遵循标签的语义。</h3><p>如：</p><pre><code>&lt;!-- good --&gt;&lt;div onclick=&quot;goToRecommendations();&quot;&gt;All recommendations&lt;/div&gt;&lt;!-- bad --&gt;&lt;a href=&quot;recommendations/&quot;&gt;All recommendations&lt;/a&gt;</code></pre><h3 id="对-HTML5-中规定允许省略的闭合标签，不允许省略闭合标签。"><a href="#对-HTML5-中规定允许省略的闭合标签，不允许省略闭合标签。" class="headerlink" title="对 HTML5 中规定允许省略的闭合标签，不允许省略闭合标签。"></a>对 <code>HTML5</code> 中规定允许省略的闭合标签，不允许省略闭合标签。</h3><p>示例：</p><pre><code>&lt;!-- good --&gt;&lt;ul&gt;    &lt;li&gt;first&lt;/li&gt;    &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;&lt;!-- bad --&gt;&lt;ul&gt;    &lt;li&gt;first    &lt;li&gt;second&lt;/ul&gt;</code></pre><h3 id="属性顺序"><a href="#属性顺序" class="headerlink" title="属性顺序"></a>属性顺序</h3><p>属性应该按照特定的顺序出现以保证易读性；</p><ul><li>class</li><li>id</li><li>name</li><li>data-*</li><li>src, for, type, href, value , max-length, max, min, pattern</li><li>placeholder, title, alt</li><li>aria-*, role</li><li>required, readonly, disabled</li></ul><p>class是为高可复用组件设计的，所以应处在第一位；</p><p>id更加具体且应该尽量少使用，所以将它放在第二位</p><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><h3 id="使用-HTML5-的-doctype-来启用标准模式"><a href="#使用-HTML5-的-doctype-来启用标准模式" class="headerlink" title="使用 HTML5 的 doctype 来启用标准模式."></a>使用 <code>HTML5</code> 的 <code>doctype</code> 来启用标准模式.</h3><p>建议使用大写的 <code>DOCTYPE</code>。</p><p>示例：</p><pre><code>&lt;!DOCTYPE html&gt;</code></pre><h3 id="页面必须使用精简形式，明确指定字符编码。"><a href="#页面必须使用精简形式，明确指定字符编码。" class="headerlink" title="页面必须使用精简形式，明确指定字符编码。"></a>页面必须使用精简形式，明确指定字符编码。</h3><p>指定字符编码的 <code>meta</code> 必须是 <code>head</code> 的第一个直接子元素。<code>UTF-8</code>。</p><p>示例：</p><pre><code>&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        ......    &lt;/head&gt;    &lt;body&gt;        ......    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="页面必须包含-title-标签声明标题。"><a href="#页面必须包含-title-标签声明标题。" class="headerlink" title="页面必须包含 title 标签声明标题。"></a>页面必须包含 <code>title</code> 标签声明标题。</h3><p><code>title</code> 必须作为 <code>head</code> 的直接子元素，并紧随 <code>charset</code> 声明之后。</p><p>示例：</p><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;页面标题&lt;/title&gt;&lt;/head&gt;</code></pre><h3 id="引入-CSS-时必须指明-rel-quot-stylesheet-quot-。"><a href="#引入-CSS-时必须指明-rel-quot-stylesheet-quot-。" class="headerlink" title="引入 CSS 时必须指明 rel=&quot;stylesheet&quot;。"></a>引入 <code>CSS</code> 时必须指明 <code>rel=&quot;stylesheet&quot;</code>。</h3><p>示例：</p><pre><code>&lt;link rel=&quot;stylesheet&quot; src=&quot;page.css&quot;&gt;</code></pre><h3 id="引入-CSS-和-JavaScript-时无须指明-type-属性。"><a href="#引入-CSS-和-JavaScript-时无须指明-type-属性。" class="headerlink" title="引入 CSS 和 JavaScript 时无须指明 type 属性。"></a>引入 <code>CSS</code> 和 <code>JavaScript</code> 时无须指明 <code>type</code> 属性。</h3><p> 解释：</p><p>text/css 和 text/javascript 是 type 的默认值</p><h3 id="移动环境或只针对现代浏览器设计的-Web-应用，如果引用外部资源的-URL-协议部分与页面相同，建议省略协议前缀。"><a href="#移动环境或只针对现代浏览器设计的-Web-应用，如果引用外部资源的-URL-协议部分与页面相同，建议省略协议前缀。" class="headerlink" title="移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 URL 协议部分与页面相同，建议省略协议前缀。"></a>移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 <code>URL</code> 协议部分与页面相同，建议省略协议前缀。</h3><p>解释：</p><p>使用 protocol-relative URL 引入 CSS，在 IE7/8 下，会发两次请求。是否使用 protocol-relative URL 应充分考虑页面针对的环境。</p><p>示例：</p><pre><code>&lt;script src=&quot;//s1.bdstatic.com/cache/static/jquery-1.10.2.min_f2fb5194.js&quot;&gt;&lt;/script&gt;</code></pre><h3 id="保证-favicon-可访问。在-Web-Server-根目录放置-favicon-ico-文件。使用-link-指定-favicon。"><a href="#保证-favicon-可访问。在-Web-Server-根目录放置-favicon-ico-文件。使用-link-指定-favicon。" class="headerlink" title="保证 favicon 可访问。在 Web Server 根目录放置 favicon.ico 文件。使用 link 指定 favicon。"></a>保证 <code>favicon</code> 可访问。在 Web Server 根目录放置 favicon.ico 文件。使用 <code>link</code> 指定 <code>favicon</code>。</h3><p>解释：</p><p>在未指定 favicon 时，大多数浏览器会请求 Web Server 根目录下的 favicon.ico 。为了保证favicon可访问，避免404，必须遵循以下两种方法之一：</p><ul><li>在 Web Server 根目录放置 favicon.ico 文件。</li><li>使用 link 指定 favicon。</li></ul><p>示例：</p><pre><code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;path/to/favicon.ico&quot;&gt;</code></pre><h3 id="有文本标题的控件必须使用-label-标签将其与其标题相关联。"><a href="#有文本标题的控件必须使用-label-标签将其与其标题相关联。" class="headerlink" title="有文本标题的控件必须使用 label 标签将其与其标题相关联。"></a>有文本标题的控件必须使用 <code>label</code> 标签将其与其标题相关联。</h3><p>解释：</p><p>有两种方式：</p><ul><li>将控件置于 label 内。</li><li>label 的 for 属性指向控件的 id。</li></ul><p>推荐使用第一种，减少不必要的 id。如果 DOM 结构不允许直接嵌套，则应使用第二种。</p><p>示例：</p><pre><code>&lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;confirm&quot; value=&quot;on&quot;&gt; 我已确认上述条款&lt;/label&gt;&lt;label for=&quot;username&quot;&gt;用户名：&lt;/label&gt; &lt;input type=&quot;textbox&quot; name=&quot;username&quot; id=&quot;username&quot;&gt;</code></pre><h3 id="使用-button-元素时必须指明-type-属性值。"><a href="#使用-button-元素时必须指明-type-属性值。" class="headerlink" title="使用 button 元素时必须指明 type 属性值。"></a>使用 <code>button</code> 元素时必须指明 type 属性值。</h3><p>解释：</p><p>button 元素的默认 type 为 submit，如果被置于 form 元素中，点击后将导致表单提交。为显示区分其作用方便理解，必须给出 type 属性。</p><p>示例：</p><pre><code>&lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;&lt;button type=&quot;button&quot;&gt;取消&lt;/button&gt;</code></pre><h3 id="若页面欲对移动设备友好，需指定页面的-viewport。"><a href="#若页面欲对移动设备友好，需指定页面的-viewport。" class="headerlink" title="若页面欲对移动设备友好，需指定页面的 viewport。"></a>若页面欲对移动设备友好，需指定页面的 viewport。</h3><p>示例：</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</code></pre><h3 id="禁止-img-的-src-取值为空。延迟加载的图片也要增加默认的-src。"><a href="#禁止-img-的-src-取值为空。延迟加载的图片也要增加默认的-src。" class="headerlink" title="禁止 img 的 src 取值为空。延迟加载的图片也要增加默认的 src。"></a>禁止 <code>img</code> 的 <code>src</code> 取值为空。延迟加载的图片也要增加默认的 <code>src</code>。</h3><p>解释：</p><p>src 取值为空，会导致部分浏览器重新加载一次当前页面，参考：<a href="https://developer.yahoo.com/performance/rules.html#emptysrc" target="_blank" rel="noopener">https://developer.yahoo.com/performance/rules.html#emptysrc</a></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="建议对超过10行的页面模块进行注释"><a href="#建议对超过10行的页面模块进行注释" class="headerlink" title="建议对超过10行的页面模块进行注释"></a>建议对超过10行的页面模块进行注释</h3><p>降低开发人员的嵌套成本和后期的维护成本.</p><p>例如：</p><pre><code>&lt;div id=&quot;sample&quot;&gt;    ...&lt;/div&gt; &lt;!-- #sample END --&gt;&lt;div class=&quot;sample&quot;&gt;    ...&lt;/div&gt; &lt;!-- .sample END --&gt;</code></pre><h3 id="使用-TODO-来标记待做事情，便于后期搜索"><a href="#使用-TODO-来标记待做事情，便于后期搜索" class="headerlink" title="使用 TODO 来标记待做事情，便于后期搜索."></a>使用 TODO 来标记待做事情，便于后期搜索.</h3><ul><li>使用 TODO 来标记待做事情，便于后期搜索.</li><li>在 TODO 后添加 (姓名或邮件) 来表示分类.</li></ul><p>例如：</p><pre><code>&lt;!-- TODO(yiminghe): remove duplicate tag --&gt;&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;</code></pre><h2 id="建议项"><a href="#建议项" class="headerlink" title="建议项"></a>建议项</h2><h3 id="为重要图片添加-alt-属性。"><a href="#为重要图片添加-alt-属性。" class="headerlink" title="为重要图片添加 alt 属性。"></a>为重要图片添加 <code>alt</code> 属性。</h3><p>解释：</p><p>可以提高图片加载失败时的用户体验。</p><h3 id="有下载需求的图片采用-img-标签实现，无下载需求的图片采用-CSS-背景图实现。"><a href="#有下载需求的图片采用-img-标签实现，无下载需求的图片采用-CSS-背景图实现。" class="headerlink" title="有下载需求的图片采用 img 标签实现，无下载需求的图片采用 CSS 背景图实现。"></a>有下载需求的图片采用 <code>img</code> 标签实现，无下载需求的图片采用 <code>CSS</code> 背景图实现。</h3><p>解释：</p><p>产品 logo、用户头像、用户产生的图片等有潜在下载需求的图片，以 img 形式实现，能方便用户下载。<br>无下载需求的图片，比如：icon、背景、代码使用的图片等，尽可能采用 css 背景图实现。</p><h3 id="尽量不要使用按钮类元素的-name-属性。"><a href="#尽量不要使用按钮类元素的-name-属性。" class="headerlink" title="尽量不要使用按钮类元素的 name 属性。"></a>尽量不要使用按钮类元素的 <code>name</code> 属性。</h3><p>解释：</p><p>由于浏览器兼容性问题，使用按钮的 name 属性会带来许多难以发现的问题。具体情况可参考<a href="http://w3help.org/zh-cn/causes/CM2001" target="_blank" rel="noopener">此文</a>。</p><h3 id="负责主要功能的按钮在-DOM-中的顺序应靠前。"><a href="#负责主要功能的按钮在-DOM-中的顺序应靠前。" class="headerlink" title="负责主要功能的按钮在 DOM 中的顺序应靠前。"></a>负责主要功能的按钮在 <code>DOM</code> 中的顺序应靠前。</h3><p>解释：</p><p>负责主要功能的按钮应相对靠前，以提高可访问性。如果在 CSS 中指定了 float: right 则可能导致视觉上主按钮在前，而 DOM 中主按钮靠后的情况。</p><p>示例：</p><pre><code>&lt;!-- good --&gt;&lt;style&gt;.buttons .button-group {    float: right;}&lt;/style&gt;&lt;div class=&quot;buttons&quot;&gt;    &lt;div class=&quot;button-group&quot;&gt;        &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;        &lt;button type=&quot;button&quot;&gt;取消&lt;/button&gt;    &lt;/div&gt;&lt;/div&gt;&lt;!-- bad --&gt;&lt;style&gt;.buttons button {    float: right;}&lt;/style&gt;&lt;div class=&quot;buttons&quot;&gt;    &lt;button type=&quot;button&quot;&gt;取消&lt;/button&gt;    &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;&lt;/div&gt;</code></pre><h3 id="在JS文件中生成标签让内容变得更难查找，更难编辑，性能更差。"><a href="#在JS文件中生成标签让内容变得更难查找，更难编辑，性能更差。" class="headerlink" title="在JS文件中生成标签让内容变得更难查找，更难编辑，性能更差。"></a>在<code>JS</code>文件中生成标签让内容变得更难查找，更难编辑，性能更差。</h3><p>应该尽量避免这种情况的出现。</p><h3 id="尽量不要引用实体"><a href="#尽量不要引用实体" class="headerlink" title="尽量不要引用实体"></a>尽量不要引用实体</h3><p>在<code>HTML</code>文档中具有特殊含义的字符（例如 <code>&lt;</code> 和 <code>&amp;</code> )为例外，还有 “不可见” 字符 （例如<code>no-break</code>空格）</p><h3 id="启用-IE-Edge-模式。"><a href="#启用-IE-Edge-模式。" class="headerlink" title="启用 IE Edge 模式。"></a>启用 <code>IE Edge</code> 模式。</h3><p>示例：</p><pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;</code></pre><h3 id="在-html-标签上设置正确的-lang-属性。"><a href="#在-html-标签上设置正确的-lang-属性。" class="headerlink" title="在 html 标签上设置正确的 lang 属性。"></a>在 <code>html</code> 标签上设置正确的 <code>lang</code> 属性。</h3><p>解释：</p><p>有助于提高页面的可访问性，如：让语音合成工具确定其所应该采用的发音，令翻译工具确定其翻译语言等。</p><p>示例：</p><pre><code>&lt;html lang=&quot;zh-CN&quot;&gt;</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/fex-team/styleguide/blob/master/html.md#42-favicon" target="_blank" rel="noopener">Baidu fex-team html编码规范</a></li><li><a href="http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/html-coding-style.html" target="_blank" rel="noopener">淘宝 kissy html 编码规范</a></li><li><a href="http://alloyteam.github.io/CodeGuide/#html" target="_blank" rel="noopener">腾讯 alloyteam html 编码规范</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> html/css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 编码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 注释与 css hack</title>
      <link href="/blog/2016/05/15/html-%E6%B3%A8%E9%87%8A%E4%B8%8E-css-hack/"/>
      <url>/blog/2016/05/15/html-%E6%B3%A8%E9%87%8A%E4%B8%8E-css-hack/</url>
      
        <content type="html"><![CDATA[<p>在 html 中适当地添加注释可以起到非常好的作用,比如解释代码内容,有时候也能用来做兼容处理,特别是针对 IE 浏览器的.css hack 也是常用的不同浏览器之间的兼容处理方式,用来处理一些奇怪的 bug…</p><a id="more"></a><h3 id="html-注释"><a href="#html-注释" class="headerlink" title="html 注释"></a>html 注释</h3><p>你可使用注释对您的代码进行解释，这样做有助于您在以后的时间对代码的编辑。当你编写了大量代码时尤其有用。<br>使用注释标签来隐藏浏览器不支持的脚本也是一个好习惯（这样就不会把脚本显示为纯文本）</p><h4 id="html中的单行注释："><a href="#html中的单行注释：" class="headerlink" title="html中的单行注释："></a>html中的单行注释：</h4><pre><code>&lt;!--这里面的XXXXXXXX是注释内容--&gt;</code></pre><h4 id="html中的块注释"><a href="#html中的块注释" class="headerlink" title="html中的块注释:"></a>html中的块注释:</h4><pre><code>&lt;!--这里面是注释内容--&gt;</code></pre><h3 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h3><p>针对不同的浏览器/不同版本写相应的CSS code的过程，叫做CSS hack!</p><h4 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释:"></a>条件注释:</h4><p>这种方式是IE浏览器专有的Hack方式，微软官方推荐使用的hack方式。<br>        1. <!--[if !IE]><!--> 除IE外都可识别 <!--<![endif]--><br>        2. <!--[if IE]> 所有的IE可识别 <![endif]--><br>        3. <!--[if IE 5.0]> 只有IE5.0可以识别 <![endif]--><br>        4. <!--[if IE 5]> 仅IE5.0与IE5.5可以识别 <![endif]--><br>        5. <!--[if gt IE 5.0]> IE5.0以及IE5.0以上版本都可以识别 <![endif]--><br>        6. <!--[if IE 6]> 仅IE6可识别 <![endif]--><br>        7. <!--[if lt IE 6]> IE6以及IE6以下版本可识别 <![endif]--><br>        8. <!--[if gte IE 6]> IE6以及IE6以上版本可识别 <![endif]--><br>        9. <!--[if IE 7]> 仅IE7可识别 <![endif]--><br>        10. <!--[if lt IE 7]> IE7以及IE7以下版本可识别 <![endif]--><br>        11. <!--[if gte IE 7]> IE7以及IE7以上版本可识别 <![endif]--> </p><h4 id="属性前缀法"><a href="#属性前缀法" class="headerlink" title="属性前缀法:"></a>属性前缀法:</h4><p>属性前缀法是在CSS样式属性名前加上一些只有特定浏览器才能识别的hack前缀，以达到预期的页面展现效果。标准模式下:</p><pre><code>1. 大部分特殊字符IE浏览器支持，其他主流浏览器firefox，chrome，opera，safari不支持 (opera可识别除外)。2. \9    ：所有IE浏览器都支持3. _和-  ：仅IE6支持4. *     ：IE6、E7支持5. \0    ：IE8、IE9支持，opera部分支持6. \9\0  ：IE8部分支持、IE9支持7. \0\9  ：IE8、IE9支持</code></pre><h4 id="选择器前缀法"><a href="#选择器前缀法" class="headerlink" title="选择器前缀法:"></a>选择器前缀法:</h4><p>选择器前缀法是针对一些页面表现不一致或者需要特殊对待的浏览器，在CSS选择器前加上一些只有某些特定浏览器才能识别的前缀进行hack。</p><pre><code>-webkit-: webkit 内核浏览器-ms-: 代表ie内核浏览器-moz-: 火狐内核浏览器-o-: opera内核浏览器</code></pre><h3 id="条件注释与CSS-hacks的一些区别："><a href="#条件注释与CSS-hacks的一些区别：" class="headerlink" title="条件注释与CSS hacks的一些区别："></a>条件注释与CSS hacks的一些区别：</h3><ol><li>hack是基于浏览器的bug，bug最终可能会被修复。<br>条件注释是基于 <strong><em>IE</em></strong> 特定代码，这种识别机制会一直存在。</li><li>浏览器都能看见hack代码，新版浏览器会因为hack代码报错。</li><li>hacks不能确保对哪些浏览器生效哪些不，尽量 <strong><em>少用</em></strong> hack,用得越多，代码越混乱。</li><li>条件注释利用版本匹配使得作者可以容易地对特定版本写代码。</li></ol>]]></content>
      
      
      <categories>
          
          <category> html/css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOCTYPE与标准模式和怪异模式</title>
      <link href="/blog/2016/05/07/DOCTYPE%E4%B8%8E%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%80%AA%E5%BC%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2016/05/07/DOCTYPE%E4%B8%8E%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%80%AA%E5%BC%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>浏览器解析CSS的两种模式：标准模式(strict mode)和怪异模式(quirks mode)。</p><p>所谓的标准模式是指，浏览器按W3C标准解析执行代码；怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。</p><p>浏览器解析时到底使用标准模式还是怪异模式，与你网页中的DTD声明直接相关，DTD声明定义了标准文档的类型（标准模式解析）文档类型，会使浏览器使用相应的方式加载网页并显示，忽略DTD声明,将使网页进入怪异模式(quirks mode)。</p><h3 id="DOCTYPE作用"><a href="#DOCTYPE作用" class="headerlink" title="DOCTYPE作用"></a>DOCTYPE作用</h3><p>doctype声明指出阅读程序应该用什么规则集来解释文档中的标记。声明文档的解析类型(document.compatMode)，避免浏览器的怪异模式。</p><h3 id="标准模式和怪异模式"><a href="#标准模式和怪异模式" class="headerlink" title="标准模式和怪异模式"></a>标准模式和怪异模式</h3><ul><li>document.compatMode：<ul><li>BackCompat：怪异模式，浏览器使用自己的怪异模式解析渲染页面。不同的浏览器就会显示不同的样式。</li><li>CSS1Compat：标准模式，浏览器使用W3C的标准解析渲染页面。</li></ul></li></ul><h3 id="DOCTYPE-声明"><a href="#DOCTYPE-声明" class="headerlink" title="DOCTYPE 声明"></a>DOCTYPE 声明</h3><h4 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML 5:"></a>HTML 5:</h4><pre><code>&lt;!DOCTYPE html&gt;</code></pre><h4 id="HTML-4-01-Strict"><a href="#HTML-4-01-Strict" class="headerlink" title="HTML 4.01 Strict:"></a>HTML 4.01 Strict:</h4><pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dt&quot;&gt;</code></pre><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p><h4 id="HTML-4-01-Transitional"><a href="#HTML-4-01-Transitional" class="headerlink" title="HTML 4.01 Transitional:"></a>HTML 4.01 Transitional:</h4><pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></pre><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p><h4 id="HTML-4-01-Frameset"><a href="#HTML-4-01-Frameset" class="headerlink" title="HTML 4.01 Frameset:"></a>HTML 4.01 Frameset:</h4><pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</code></pre><p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。</p><h4 id="XHTML-1-0-Strict-XHTML-1-0-Transitional-XHTML-1-0-Frameset-XHTML-1-1-等参考-这里"><a href="#XHTML-1-0-Strict-XHTML-1-0-Transitional-XHTML-1-0-Frameset-XHTML-1-1-等参考-这里" class="headerlink" title="XHTML 1.0 Strict, XHTML 1.0 Transitional, XHTML 1.0 Frameset, XHTML 1.1 等参考 这里"></a>XHTML 1.0 Strict, XHTML 1.0 Transitional, XHTML 1.0 Frameset, XHTML 1.1 等参考 <a href="http://www.w3school.com.cn/tags/tag_doctype.asp" target="_blank" rel="noopener">这里</a></h4>]]></content>
      
      
      <categories>
          
          <category> html/css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016前端学习分类指南</title>
      <link href="/blog/2016/05/03/2016%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2016/05/03/2016%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>此文介绍了我个人学习前端所总结的资源分类大纲.每个栏目下的<strong>推荐</strong>部分基本为必要的,<strong>可选</strong>的部分以后也是要学的…同时也已经入了全栈的坑,不过我后端还是入门不久,因此这里一笔带过.若文章在作为自己路灯的同时,也能照亮他人,那实为一件荣幸之事~</p><h3 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h3><p>前端学习中最原始也是最重要的东西:</p><ul><li>html5</li><li>css3</li><li>js/es6</li></ul><h3 id="github上的前端学习指导"><a href="#github上的前端学习指导" class="headerlink" title="github上的前端学习指导"></a>github上的前端学习指导</h3><p>牛人总结的学习大纲</p><ul><li>推荐<ul><li><a href="https://github.com/jsfront/src/blob/master/qq.md" target="_blank" rel="noopener">前端学习指南</a></li><li><a href="https://github.com/ouvens/frontend-system-map" target="_blank" rel="noopener">前端系统图谱</a></li></ul></li></ul><h3 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h3><p>类库是一些函数的集合，它能帮助你写WEB应用。起主导作用的是你的代码，由你来决定何时使用类库。</p><ul><li>推荐<ul><li>jQuery: A fast, small, and feature-rich JavaScript library.</li><li>animateCss: css3动画库</li><li>underscore.js: 是一个 JavaScript 工具库，它提供了一整套函数式编程的实用功能，但是没有扩展任何 JavaScript 内置对象。 他解决了这个问题：“如果我面对一个空白的 HTML 页面，并希望立即开始工作，我需要什么？” 他弥补了 jQuery 没有实现的功能，同时又是 Backbone 必不可少的部分。</li><li>Lodash: underscore.js衍生</li></ul></li><li>可选    <ul><li>socket.io: websocket实时应用框架</li><li>D3.js: 是一个JavaScript库，它可以通过数据来操作文档</li><li>moment.js: JavaScript 日期处理类库</li><li>prototype.js: 原生 js 扩展</li><li>easing.js: jquery 缓冲动画插件</li><li>ceaser: CSS EASING ANIMATION TOOL</li><li>cubic-bezier: 赛贝尔曲线</li></ul></li></ul><h3 id="mv-框架"><a href="#mv-框架" class="headerlink" title="mv* 框架"></a>mv* 框架</h3><p>框架 - 框架是一种特殊的、已经实现了的WEB应用，你只需要对它填充具体的业务逻辑。这里框架是起主导作用的，由它来根据具体的应用逻辑来调用你的代码。</p><ul><li>推荐<ul><li>vueJS: view 层,数据驱动的组件，为现代化的 Web 界面而生. - 尤雨溪</li><li>angularJS: 为了克服HTML在构建应用上的不足而设计的. - Google</li><li>reactJS: view 层,A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES. - Facebook</li><li>backbone.js: 简单纯粹的 mv* 框架.最佳适用场景是单页面应用，并且页面上有大量数据模型，模型之间需要进行复杂的信息沟通。</li></ul></li><li>可选    <ul><li>avalonJS: 迷你 mvvm 框架,司徒正美 去哪儿网</li><li>Ember.js: A framework for creating ambitious web applications.</li><li>Meteor: build app with JavaScript.现代网站开发平台，希望构建一个极简的网站开发环境。</li><li>Flux: 配合 react,用来构建用户端的web应用的应用程序体系架构。- Facebook</li><li>Redux: 配合 react,Redux is a predictable state container for JavaScript apps.是一个友好简洁的 flux 模式的实现.意义:实现前后端同构,更好组织 UI 组件事件分发.</li><li>ThinkJS: 一个快速、简单的基于MVC和面向对象的轻量级Node.js开发框架.使用了 ES6/7.全栈开发</li></ul></li></ul><h3 id="UI-框架"><a href="#UI-框架" class="headerlink" title="UI 框架"></a>UI 框架</h3><p>快速建站框架</p><ul><li>推荐    <ul><li>Bootstrap: the most popular HTML, CSS, and JS framework for developing responsive, mobile first projects on the web. - Facebook</li><li>amaze ui: 中国首个开源 HTML5 跨屏前端框架. - 妹子 UI</li></ul></li><li>常用    <ul><li>foundation: 迄今为止最好的响应式前端框架，更快、更轻、更多功能、更灵活、更强大！</li><li>semantic ui: 语义化的网页语言</li><li>frozen ui: 简单易用，轻量快捷，为移动端服务的前端框架. - 手机QQ UI</li><li>weiui: 微信官方网页开发样式库.</li><li>blendui: 移动web开发框架,通过集成原生组件令App体验一流，并为O2O场景特别优化. - 百度 UI</li><li>echarts: 一个纯 Javascript 的图表库. - 百度</li><li>jqwidgets: Advanced JavaScript &amp; HTML5 UI Framework</li></ul></li></ul><h3 id="游戏引擎"><a href="#游戏引擎" class="headerlink" title="游戏引擎"></a>游戏引擎</h3><p>h5 游戏开发</p><ul><li>推荐    <ul><li>egret: 国产2D,现在可以3D.中文易学些.</li><li>createJs: 基于HTML5开发的一套模块化的库和工具，拥有共同或独立工作的丰富交互式内容的开源Web技术。</li><li>pixiJs: 2D webGL renderer with canvas fallback</li><li>threeJs: 3D JavaScript Library</li></ul></li><li>可选<ul><li>pomelo: Fast, scalable, distributed game server framework for node.js. - 网易</li></ul></li></ul><h3 id="混合应用框架"><a href="#混合应用框架" class="headerlink" title="混合应用框架"></a>混合应用框架</h3><p>web 入侵其他领域</p><ul><li>推荐    <ul><li>reactNative: Learn once, write anywhere.构建原生 APP</li><li>nwjs: node-webkit.桌面应用框架</li></ul></li><li>可选    <ul><li>ionic: HTML5 Hybrid Mobile App Framework.AngularJS移动端解决方案</li><li>hex: USING HTML5 AND NODE.JS TO BUILD DESKTOP APPLICATION. - 网易有道</li><li>appjs: 一个令人振奋的 JavaScript 库，使我们能够使用 Web 技术快速开发桌面应用程序</li><li>Electron: Build cross platform desktop apps with web technologies</li></ul></li></ul><h3 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h3><p>处理兼容或者便于管理,快速书写</p><ul><li>推荐    <ul><li>less/scss: css 预处理器</li><li>babel: es6 语法预编译</li></ul></li><li>可选    <ul><li>polyfill: 使浏览器支持应有特性</li><li>shim: 使浏览器支持新特性</li><li>bluebird: Full featured Promises/A+ implementation with exceptionally good performance</li></ul></li></ul><h3 id="移动端框架"><a href="#移动端框架" class="headerlink" title="移动端框架"></a>移动端框架</h3><p>移动开发常用</p><ul><li>推荐    <ul><li>zepto: 轻量jQuery</li><li>swiper: 移动端网页触摸内容滑动js插件.</li><li>touch: BAIDU CLOUDA EVENT &amp; GESTURE LIBRARY</li><li>hammerjs: 是一个开源的，轻量级的javascript库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。</li></ul></li><li>可选<ul><li>iscroll: smooth scrolling for the web</li><li>video.js: html5 视频框架</li></ul></li></ul><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>构建自己的前端工作流</p><ul><li>推荐<ul><li>bower: 前端包管理</li><li>npm: nodejs package manager</li><li>gulp: 前端构建工具</li><li>browserify: 模块化</li><li>requireJs: 模块化amd</li><li>webpack: 模块化与前端构建 commonjs&amp;amd. - Facebook</li></ul></li><li>可选<ul><li>seaJs: 模块化cmd. - 玉伯 淘宝</li><li>fis: 为你定制的前端工程构建工具. - 百度</li></ul></li></ul><h3 id="开发组合"><a href="#开发组合" class="headerlink" title="开发组合"></a>开发组合</h3><p>开发全家桶</p><ul><li>推荐<ul><li>gulp+browserify+babel: 前端构建套装</li><li>react + webpack + babel: react项目构建</li><li>react+flux+koa: react 应用开发套装</li></ul></li><li>可选<ul><li>mean: mongoDB express angular nodejs 全栈套餐</li></ul></li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>不会后端的前端不是好前端</p><ul><li>推荐<ul><li>php+mysql</li><li>nodejs+mongoDB</li></ul></li><li>可选<ul><li>thinkphp: 是一个快速、兼容而且简单的轻量级国产PHP开发框架</li><li>laravel: 为 WEB 艺术家创造的 PHP 框架</li><li>express/koa: 基于 Node.js 平台，快速、开放、极简的 web 开发框架。</li><li>jade: 源于 Node.js 的 HTML 模板引擎</li></ul></li></ul><h3 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h3><p>有用而有趣的工具</p><ul><li>推荐<ul><li>codepen: web在线编辑,各种栗子</li><li>github: 世界著名同性交友网站</li><li>can i use: Support tables for HTML5, CSS3, etc</li></ul></li><li>可选<ul><li>easyicon: 图标</li><li>iconfont: 图标字体</li><li>impress.js: It’s a presentation framework based on the power of CSS3 transforms and transitions in modern browsers.</li><li>reveal.js: A framework for easily creating beautiful presentations using HTML</li><li>lantern: 翻墙</li></ul></li></ul><h3 id="学习资讯"><a href="#学习资讯" class="headerlink" title="学习资讯"></a>学习资讯</h3><p>学习是一门技巧</p><ul><li>推荐<ul><li>阮一峰个人网站: 大神!但可能出现几年后他说之前理解错了的情况,被误导就怪自己修行不够</li><li>廖雪峰个人网站: 只看了 git 教程, 简单易懂</li><li>张鑫旭个人网站: 风格有点奇怪但是很厉害</li><li>尤雨溪个人网站: 严格意义上的大神</li><li><a href="http://taobaofed.org/" target="_blank" rel="noopener">http://taobaofed.org/</a>: 淘宝前端团队</li><li>alloyteam: 腾讯全端团队</li><li>ISUX: 腾讯社交用户体验设计</li><li>奇舞团: 360前端</li><li>知乎: 问答社区</li><li>stackoverflow: 问答社区</li><li>慕课网: IT 教程</li><li>w3cshool: web 教程</li><li>w3cplus: 引领web前沿,打造前端精品教程</li><li>菜鸟教程: 入门教程</li><li>segmentfault.com: 是一个专注于解决编程问题，提高开发技能的社区。页面好看,回答好,有教程.</li><li>推酷: IT人专属个性阅读社区.</li><li>伯乐在线: 做最专业的IT互联网职业社区</li><li>开源中国: 找到您想要的开源项目，分享和交流.</li><li>htmleaf: jQuery之家,自由分享jQuery、html5和css3的插件库</li><li>dowebok: 意为做好网站,为用户提供代码、素材、特效、教程、模板等建站服务。</li><li>微信,微博,qq: 关注些牛人, 技术资讯, 加入些技术干货群</li></ul></li><li>可选<ul><li>cnblog: 面向开发者的知识分享社区.</li><li>CSDN: 中文 IT 社区</li><li>open-open.com: 您的生活化网络和IT资讯来源</li><li>html5中国: html5中文社区</li><li>极客学院: 各种教程</li><li>Codepad: a place for developers to share &amp; save code snippets. Join the community!</li><li>v2ex.com: V2EX 是一个关于分享和探索的地方</li><li>数英: 数字媒体及职业招聘网站</li><li>码农网: 编程经验分享</li><li>简书: 交流故事，沟通想法,一个基于内容分享的社区</li><li>简明现代魔法: 加入魔法协会，一起分享编程的快乐</li><li>cocoachina: 让移动开发更简单</li><li>脚本之家</li><li>红黑联盟: IT 门户</li><li>程序师: 用程序猿的阳光看世界</li></ul></li></ul><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p>只看过一本纸质书,但是觉得很有用</p><ul><li>推荐<ul><li>Javascript设计模式</li></ul></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>不会搞艺术的程序员不是好设计师</p><ul><li>推荐<ul><li>ps: 切图(cutterman)</li></ul></li><li>可选<ul><li>sketch: mac 设计</li><li>axure: 交互原型设计</li><li>xmind: 脑图</li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>必备防身技能</p><ul><li>推荐<ul><li>git: 版本管理</li><li>HTTP</li><li>TCP/IP</li><li>seo: 搜索引擎优化</li><li>shell: 命名行</li><li>微信jssdk: 微信h5开发</li></ul></li><li>可选<ul><li>cdn: 内容分发网络</li><li>REST API</li><li>markdown</li></ul></li></ul><h3 id="加分"><a href="#加分" class="headerlink" title="加分"></a>加分</h3><p>养成良好习惯,做点能出手的东西</p><ul><li>推荐</li></ul><ol><li>技术博客</li><li>github</li><li>优秀项目</li><li>收集常遇到的问题</li><li>全栈</li></ol><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>好的编辑器对编程速度和质量都很重要</p><ul><li>推荐<ul><li>sublime: 轻量,丰富插件</li><li>idea/webstorm/phpstorm: 强大</li></ul></li><li>可选<ul><li>vscode: 开源,听说好厉害的样子,但是没研究过</li></ul></li></ul><h3 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h3><p>优化有很多,网页收藏,云笔记也好,最重要是要用</p><ul><li>推荐<ul><li>雅虎军规</li><li>兼容</li><li>移动端优化</li></ul></li></ul><h3 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h3><p>少几个bug吧</p><ul><li>推荐<ul><li>单元测试</li><li>chromeDevTools 调试</li></ul></li><li>可选<ul><li>jshint</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 全栈 </tag>
            
            <tag> 指南 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
